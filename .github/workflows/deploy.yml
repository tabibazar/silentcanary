name: Deploy SilentCanary to EC2

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  EC2_HOST: 35.182.6.75
  EC2_USER: ubuntu
  APP_DIR: /opt/silentcanary

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

    - name: Add EC2 to known hosts
      run: |
        ssh-keyscan -H ${{ env.EC2_HOST }} >> ~/.ssh/known_hosts

    - name: Deploy to EC2
      run: |
        # Create deployment script
        cat > deploy_script.sh << 'EOF'
        #!/bin/bash
        set -e

        echo "🚀 Starting deployment..."

        # Check if app directory exists, if not create it and clone
        if [ ! -d "${{ env.APP_DIR }}" ]; then
          echo "📁 Creating app directory and cloning repository..."
          sudo mkdir -p ${{ env.APP_DIR }}
          sudo chown ubuntu:ubuntu ${{ env.APP_DIR }}
          git clone https://github.com/tabibazar/silentcanary.git ${{ env.APP_DIR }}
          cd ${{ env.APP_DIR }}

          # Run initial setup
          echo "🔧 Running initial setup..."
          if [ -f "complete-deployment.sh" ]; then
            chmod +x complete-deployment.sh
            ./complete-deployment.sh
          fi
        else
          # Navigate to app directory
          cd ${{ env.APP_DIR }}

          # Pull latest changes
          echo "📥 Pulling latest code..."
          git pull origin main
        fi

        # Create .env file if it doesn't exist
        if [ ! -f ".env" ]; then
          echo "📝 Creating .env file..."
          if [ -f ".env.template" ]; then
            cp .env.template .env
          else
            echo "📝 Creating basic .env file..."
            cat > .env << EOF
FLASK_ENV=production
FLASK_APP=app.py
SECRET_KEY=temp_secret_key_change_this
AWS_ACCESS_KEY_ID=your_aws_access_key
AWS_SECRET_ACCESS_KEY=your_aws_secret_key
AWS_DEFAULT_REGION=ca-central-1
STRIPE_PUBLISHABLE_KEY=pk_live_your_key
STRIPE_SECRET_KEY=sk_live_your_key
STRIPE_WEBHOOK_SECRET=whsec_RcURWsWzfABXKmQiEmpwMJCUabKvrEZh
SENDGRID_API_KEY=SG.your_sendgrid_key
FROM_EMAIL=noreply@silentcanary.com
RECAPTCHA_SITE_KEY=your_site_key
RECAPTCHA_SECRET_KEY=your_secret_key
REDIS_URL=redis://redis:6379/0
REDIS_HOST=redis
REDIS_ENDPOINT=
BASE_URL=https://silentcanary.com
ANTHROPIC_API_KEY=your_anthropic_key
EOF
          fi
        fi

        # Update environment variables
        echo "⚙️ Updating environment..."
        # Ensure Redis uses Docker network
        if ! grep -q "REDIS_HOST=redis" .env; then
          echo "REDIS_HOST=redis" >> .env
        fi
        if ! grep -q "REDIS_ENDPOINT=" .env; then
          echo "REDIS_ENDPOINT=" >> .env
        fi

        # Ensure Docker and Docker Compose are installed
        if ! command -v docker &> /dev/null; then
          echo "🐳 Installing Docker..."
          curl -fsSL https://get.docker.com -o get-docker.sh
          sudo sh get-docker.sh
          sudo usermod -aG docker ubuntu
        fi

        if ! command -v docker-compose &> /dev/null; then
          echo "🐳 Installing Docker Compose..."
          sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
        fi

        # Stop current containers if they exist
        echo "🛑 Stopping current containers..."
        docker-compose down 2>/dev/null || echo "No containers to stop"

        # Clean up old images
        echo "🧹 Cleaning up..."
        docker system prune -f

        # Build and start new containers
        echo "🔨 Building and starting containers..."
        docker-compose up -d --build

        # Wait for services to start
        echo "⏳ Waiting for services..."
        sleep 30

        # Health check
        echo "🔍 Running health check..."
        if curl -f http://localhost/health; then
          echo "✅ Deployment successful!"
        else
          echo "❌ Health check failed"
          docker-compose logs
          exit 1
        fi
        EOF

        # Execute deployment script on EC2
        ssh -o StrictHostKeyChecking=no ${{ env.EC2_USER }}@${{ env.EC2_HOST }} "bash -s" < deploy_script.sh

    - name: Verify deployment
      run: |
        # Wait a bit more for full startup
        sleep 10

        # Test external access
        if curl -f http://${{ env.EC2_HOST }}/health; then
          echo "✅ External health check passed!"
        else
          echo "❌ External health check failed"
          exit 1
        fi

    - name: Notify deployment status
      if: always()
      run: |
        if [ ${{ job.status }} == 'success' ]; then
          echo "🎉 Deployment completed successfully!"
          echo "🌐 Application available at: http://silentcanary.com"
        else
          echo "❌ Deployment failed!"
        fi