name: Build and Deploy to EKS

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  AWS_REGION: ca-central-1
  EKS_CLUSTER_NAME: silentcanary-cluster
  ECR_REPOSITORY: silentcanary
  KUBE_NAMESPACE: silentcanary

jobs:
  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.build-image.outputs.image-tag }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and push it to ECR
        echo "Building Docker image..."
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        
        echo "Pushing image to ECR..."
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        echo "image-tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

  deploy:
    name: Deploy to EKS
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Install kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Update kube config
      run: aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }}

    - name: Create namespace if not exists
      run: |
        kubectl create namespace ${{ env.KUBE_NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -

    - name: Create secrets (if not exists)
      run: |
        # Check if secret exists, if not create it with placeholder values
        if ! kubectl get secret silentcanary-secrets -n ${{ env.KUBE_NAMESPACE }} > /dev/null 2>&1; then
          kubectl create secret generic silentcanary-secrets \
            --from-literal=sendgrid-api-key="${{ secrets.SENDGRID_API_KEY }}" \
            --from-literal=sendgrid-default-sender="${{ secrets.SENDGRID_DEFAULT_SENDER }}" \
            --from-literal=flask-secret-key="${{ secrets.FLASK_SECRET_KEY }}" \
            -n ${{ env.KUBE_NAMESPACE }}
        else
          echo "Secret already exists, updating..."
          kubectl create secret generic silentcanary-secrets \
            --from-literal=sendgrid-api-key="${{ secrets.SENDGRID_API_KEY }}" \
            --from-literal=sendgrid-default-sender="${{ secrets.SENDGRID_DEFAULT_SENDER }}" \
            --from-literal=flask-secret-key="${{ secrets.FLASK_SECRET_KEY }}" \
            -n ${{ env.KUBE_NAMESPACE }} \
            --dry-run=client -o yaml | kubectl replace -f -
        fi

    - name: Deploy service account and RBAC
      run: |
        # Update the service account with the correct IAM role ARN
        sed -i "s/ACCOUNT_ID/${{ secrets.AWS_ACCOUNT_ID }}/g" k8s/service-account.yaml
        kubectl apply -f k8s/service-account.yaml

    - name: Deploy application
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ needs.build.outputs.image-tag }}
      run: |
        # Update deployment with new image
        sed -i "s|silentcanary:latest|$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG|g" k8s/deployment.yaml
        
        # Apply all Kubernetes manifests
        kubectl apply -f k8s/namespace.yaml
        kubectl apply -f k8s/deployment.yaml
        kubectl apply -f k8s/hpa.yaml
        
        # Wait for deployment to be ready
        kubectl rollout status deployment/silentcanary-app -n ${{ env.KUBE_NAMESPACE }} --timeout=300s

    - name: Deploy ingress (optional)
      run: |
        # Only deploy ingress if you have ALB controller installed and domain configured
        # kubectl apply -f k8s/ingress.yaml

    - name: Verify deployment
      run: |
        kubectl get pods -n ${{ env.KUBE_NAMESPACE }}
        kubectl get services -n ${{ env.KUBE_NAMESPACE }}
        kubectl get ingress -n ${{ env.KUBE_NAMESPACE }} || echo "No ingress found"
        
        # Get the service endpoint
        echo "Service endpoints:"
        kubectl get endpoints -n ${{ env.KUBE_NAMESPACE }}

    - name: Run health check
      run: |
        # Wait a bit for pods to be ready
        sleep 30
        
        # Port forward to test the application
        kubectl port-forward -n ${{ env.KUBE_NAMESPACE }} svc/silentcanary-service 8080:80 &
        PF_PID=$!
        sleep 10
        
        # Test health endpoint
        curl -f http://localhost:8080/health || exit 1
        echo "Health check passed!"
        
        # Clean up port forward
        kill $PF_PID