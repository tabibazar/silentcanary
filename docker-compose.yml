version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile.simple
    container_name: silentcanary-app
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - FLASK_ENV=production
      - FLASK_APP=app.py
      - REDIS_URL=redis://redis:6379/0
      - REDIS_HOST=redis
      - AWS_DEFAULT_REGION=ca-central-1
    env_file:
      - .env
    volumes:
      - ./logs:/app/logs
      - ./static:/app/static
    depends_on:
      - redis
    command: gunicorn --bind 0.0.0.0:8000 --workers 2 --timeout 120 app:app

  worker:
    build:
      context: .
      dockerfile: Dockerfile.simple
    container_name: silentcanary-worker
    restart: unless-stopped
    environment:
      - FLASK_ENV=production
      - FLASK_APP=app.py
      - REDIS_URL=redis://redis:6379/0
      - REDIS_HOST=redis
      - AWS_DEFAULT_REGION=ca-central-1
    env_file:
      - .env
    volumes:
      - ./logs:/app/logs
    depends_on:
      - redis
    command: python worker.py

  scheduler:
    build:
      context: .
      dockerfile: Dockerfile.simple
    container_name: silentcanary-scheduler
    restart: unless-stopped
    environment:
      - FLASK_ENV=production
      - FLASK_APP=app.py
      - REDIS_URL=redis://redis:6379/0
      - REDIS_HOST=redis
      - AWS_DEFAULT_REGION=ca-central-1
    env_file:
      - .env
    volumes:
      - ./logs:/app/logs
    depends_on:
      - redis
    command: python scheduler.py

  redis:
    image: redis:7-alpine
    container_name: silentcanary-redis
    restart: unless-stopped
    # Remove external port mapping - only accessible from within Docker network
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru

  nginx:
    image: nginx:alpine
    container_name: silentcanary-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./certbot/conf:/etc/letsencrypt:ro
      - ./certbot/www:/var/www/certbot:ro
      - /var/log/nginx:/var/log/nginx
    depends_on:
      - app

  certbot:
    image: certbot/certbot
    container_name: silentcanary-certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

volumes:
  redis_data: